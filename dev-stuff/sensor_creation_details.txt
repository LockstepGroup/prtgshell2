<#

interval_ values:

1800|30 minutes
300|5 minutes
86400|24 hours

 to modify these on create, "intervalgroup" needs to be 0 (defaults to 1, which is inherit)
 TBD if the pipe character and the value afterwards matter

 
 
inherittriggers appears to refer to the notification inheritance, which is actually not
configurable from the web interface on sensor creation
0 = Only use triggers defined for this object
1 = Inherit trigger(s) from parent object(s)

it is also modifiable with editsettings using the "inherittriggers_" property
 
 
#>
###############################################################################
# EXEXML

$QueryStringTable = @{
	"name_" = $PrtgObject.Name
	"tags_" = $PrtgObject.Tags
	"priority_" = $PrtgObject.Priority
	"intervalgroup" = 1
	"interval_" = "60|60 seconds"
	"inherittriggers" = 1
	"id" = $PrtgObject.ParentId
	
	"sensortype" = "exexml"
	
	"exefile_" = "$($PrtgObject.Script)|$$(PrtgObject.Script)||" # WHAT THE FUCK
	"exefilelabel" = "" # this is hidden by default; ??
	"exeparams_" = $PrtgObject.ExeParams
	"environment_" = $PrtgObject.Environment
	"usewindowsauthentication_" = $PrtgObject.SecurityContext
	"mutexname_" = $PrtgObject.Mutex
	"timeout_" = 60
	"writeresult_" = $PrtgObject.ExeResult # this can be 0 or 1 in v13, or 0-2 in v14 (2 being "write on error only")
	
}

###############################################################################
# aggregation (factory)

$AggregationChannelDefinition = @"
#1:fcsbarracuda1: InQueueSize [messages]
Channel(92411,0)
#2:fcsbarracuda2: InQueueSize [messages]
Channel(92437,0)
#3:Aggregate InQueueSize [messages]
Channel(92411,0) + Channel(92437,0)
"@

$QueryStringTable = @{
	"name_" = $PrtgObject.Name
	"tags_" = $PrtgObject.Tags
	"priority_" = $PrtgObject.Priority
	"intervalgroup" = 1
	"interval_" = "60|60 seconds"
	"inherittriggers" = 1
	"id" = $PrtgObject.ParentId
	
	"sensortype" = "aggregation"
	
	"aggregationchannel_" = $AggregationChannelDefinition
	"warnonerror_" = 0 # 0 = "Factory sensor shows error state when one or more source sensors are in error state"; 1 = "Factory sensor shows warning state when one or more source sensors are in error state"; 2 = "Use custom formula", uses aggregation status field
	"aggregationstatus_" = 0 # https://prtg.forsyth.k12.ga.us/help/sensor_factory_sensor.htm#sensor_status
	"missingdata_" = 0 # 0 = " Do not calculate factory channels that use the sensor"; 1 = "Calculate the factory channels and use zero as source value"

}



###############################################################################
# ping


$QueryStringTable = @{
	"name_" = $PrtgObject.Name
	"tags_" = $PrtgObject.Tags
	"priority_" = $PrtgObject.Priority
	"intervalgroup" = 1
	"interval_" = "60|60 seconds"
	"inherittriggers" = 1
	"id" = $PrtgObject.ParentId
	
	"sensortype" = "ping"
	
	"timeout_" = 5
	"size_" = 32
	"countmethod_" = 0 # 1 enables multiple-packet mode
	"count_" = 1 # default is 1; number of packets to send in multiple-packet mode (adds additional channels)
	"delay_" = 0 # delay between multople pings, only used when count_ is greater than 1
	"autoacknowledge_" = 0 # 1 sets it to autoacknowledge the down state

}



###############################################################################
# snmp custom


$QueryStringTable = @{
	"name_" = $PrtgObject.Name
	"tags_" = $PrtgObject.Tags
	"priority_" = $PrtgObject.Priority
	"intervalgroup" = 1
	"interval_" = "60|60 seconds"
	"inherittriggers" = 1
	"id" = $PrtgObject.ParentId
	
	"sensortype" = "snmpcustom"
	
	"oid_" = "1.3.6.1.4.1.20632.2.5"
	"channel_" = "channel name"
	"unit_" = "#" # channel unit string
	"snmptype_" = "abs" # "abs" = Gauge (unsigned Integer, e.g. "10", "120"); "sign" = Gauge (signed integer, e.g. "-12", "120"); "float" = Gauge (float, e.g. "-5.80", "8.23"); "diff" = Delta (Counter)
	"factorm_" = 1 # value the raw SNMP value is to be multipled by.
	"factord_" = 1 # value the raw SNMP value is divided by.
	"monitorchange_" = 0 # 1 = monitor for and trigger change notifications

}



###############################################################################
# editsettings notables

"dependencytype_" = 0 # use parent
"dependencytype_" = 2 # master object for parent
"dependencytype_" = 1 # select object, needs the below settings:
 "dependency_" = 42704 # object ID of the object we're depending on
 "depdelay_" = #dependency delay (seconds)

 

###############################################################################
#

function New-PrtgSensor {
    Param (
        [Parameter(Mandatory=$True,Position=0)]
        [psobject]$PrtgObject
    )

    BEGIN {
        Add-Type -AssemblyName System.Web # Needed for System.Web.HttpUtility
        $PRTG = $Global:PrtgServerObject
		if ($PRTG.Protocol -eq "https") { HelperSSLConfig }
    }

    PROCESS {

    ###############################################################################
    # Tediously inspect the Object, needs more c#, maybe?

    $PropertyTypes = @{Name            = "String"
                       Tags            = "String"
                       Priority        = "Int32"
                       Script          = "String"
                       ExeParams       = "String"
                       Environment     = "Int32"
                       SecurityContext = "Int32"
                       Mutex           = "String"
                       ExeResult       = "Int32"
                       ParentId        = "Int32"}

    foreach ($p in $PropertyTypes.GetEnumerator()) {
        $PropName  = $p.Name
        $PropValue = $PrtgObject."$PropName"
        $Type      = $PrtgObject."$PropName".GetType().Name
        
        if ($Type -eq $p.Value) {
            switch ($PropName) {
                priority {
                    if (($PropValue -lt 1) -or ($PropValue -gt 5)) {
                        $ErrorMessage = "Error creating Sensor $($Prtgobject.Name). $PropName is $PropValue, must be a integer from 1 to 5."
                    }
                }
                { ($_ -eq "environment") -or ($_ -eq "securitycontext") } {
                    if (($PropValue -lt 0) -or ($PropValue -gt 1)) {
                        $ErrorMessage = "Error creating Sensor $($Prtgobject.Name). $PropName is $PropValue, must be a integer from 0 to 1."
                    }
                }
                exeresult {
                    if (($PropValue -lt 0) -or ($PropValue -gt 2)) {
                        $ErrorMessage = "Error creating Sensor $($Prtgobject.Name). $PropName is $PropValue, must be a integer from 0 to 1."
                    }
                }
            }
        } else {
            $ErrorMessage = "Error creating Sensor $($Prtgobject.Name), $($p.Name) is $Type, should be $($p.Value)"
        }
        if ($ErrorMessage) { return $ErrorMessage }
    }

    ###############################################################################
    # build the post data payload/query string
    # note that "$QueryString.ToString()" actually builds this
    
    $QueryStringTable = @{
	    "name_" = $PrtgObject.Name
	    "tags_" = $PrtgObject.Tags
	    "priority_" = $PrtgObject.Priority
	    "exefile_" = "$($PrtgObject.Script)|$$(PrtgObject.Script)||" # WHAT THE FUCK
	    "exefilelabel" = ""
	    "exeparams_" = $PrtgObject.ExeParams
	    "environment_" = $PrtgObject.Environment
	    "usewindowsauthentication_" = $PrtgObject.SecurityContext
	    "mutexname_" = $PrtgObject.Mutex
	    "timeout_" = 60
	    "writeresult_" = $PrtgObject.ExeResult
	    "intervalgroup" = 1
	    "interval_" = "60|60 seconds"
	    "inherittriggers" = 1
	    "id" = $PrtgObject.ParentId
	    "sensortype" = "exexml"
    }

    # create a blank, writable HttpValueCollection object
    $QueryString = [System.Web.httputility]::ParseQueryString("")

    # iterate through the hashtable and add the values to the HttpValueCollection
    foreach ($Pair in $QueryStringTable.GetEnumerator()) {
	    $QueryString[$($Pair.Name)] = $($Pair.Value)
    }

    ###############################################################################
    # fire the api call

    $Url  = "https://$($PRTG.Server)"
    $Url += "/addsensor5.htm?"
    $Url += "username=$($PRTG.UserName)&"
    $Url += "passhash=$($PRTG.PassHash)"
    #$Url

    HelperHTTPPostCommand $Url $QueryString.ToString() | Out-Null

    }
}

function HelperHTTPPostCommand() {
	param(
		[string] $url = $null,
		[string] $data = $null,
		[System.Net.NetworkCredential]$credentials = $null,
		[string] $contentType = "application/x-www-form-urlencoded",
		[string] $codePageName = "UTF-8",
		[string] $userAgent = $null
	);

	if ( $url -and $data ) {
		[System.Net.WebRequest]$webRequest = [System.Net.WebRequest]::Create($url);
		$webRequest.ServicePoint.Expect100Continue = $false;
		if ( $credentials ) {
			$webRequest.Credentials = $credentials;
			$webRequest.PreAuthenticate = $true;
		}
		$webRequest.ContentType = $contentType;
		$webRequest.Method = "POST";
		if ( $userAgent ) {
			$webRequest.UserAgent = $userAgent;
		}

		$enc = [System.Text.Encoding]::GetEncoding($codePageName);
		[byte[]]$bytes = $enc.GetBytes($data);
		$webRequest.ContentLength = $bytes.Length;
		[System.IO.Stream]$reqStream = $webRequest.GetRequestStream();
		$reqStream.Write($bytes, 0, $bytes.Length);
		$reqStream.Flush();

		$resp = $webRequest.GetResponse();
		$rs = $resp.GetResponseStream();
		[System.IO.StreamReader]$sr = New-Object System.IO.StreamReader -argumentList $rs;
		$sr.ReadToEnd();
	}
}
 